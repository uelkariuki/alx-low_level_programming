!<arch>
0-isupper.c/    0           0     0     644     263       `
#include "main.h"

/**
  *_isupper-  function that checks for uppercase character.
  *@c: character to be checked
  *Return: 1 if c is uppercase, 0 otherwise
  */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);

	}
}


0-memset.c/     0           0     0     644     319       `
#include "main.h"

/**
  *_memset- function that fills memory with a constant byte.
  *
  *@n: bytes of the memory area
  *@s: pointer
  *@b: the contant byte
  *Return: pointer to the memory area s
  */

char *_memset(char *s, char b, unsigned int n)
{
	char *p = s;

	while (n--)
	{
		*p++ = b;

	}
	return (s);



}

0-strcat.c/     0           0     0     644     536       `
#include "main.h"

/**
  *_strcat- function that concatenates two strings.
  *@dest: destination string
  *@src: source string
  *Return: dest
  */

char *_strcat(char *dest, char *src)
{
	/*assign a pointer to point at the beginning of dest string*/
	char *p = dest;

	while (*p != '\0')
	{
		/*loop through the next character in the dest string*/
		p++;
	}

	while (*src != '\0')
	{
		*p = *src;
		p++;
		src++;
	}
	/*add a terminating null character at the end of*/
	/*concanated destination string*/
	*p = '\0';

	return (dest);

}
1-isdigit.c/    0           0     0     644     260       `
#include "main.h"

/**
  *_isdigit -function that checks for a digit (0 through 9).
  *@c: character to be checked
  *Return:1 if c is a digit, 0 otherwise
  */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);

	}
}
1-memcpy.c/     0           0     0     644     352       `
#include "main.h"

/**
  *_memcpy- function that copies memory area.
  *@n: number of bytes to be copied from memory area
  *@src: source
  *@dest: destination
  *Return:a pointer to dest
  */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *pdest = dest;
	char *psrc = src;

	while (n--)
	{
		*pdest++ = *psrc++;

	}
	return (dest);


}
1-strncat.c/    0           0     0     644     474       `
#include "main.h"


/**
  **_strncat- function that concatenates two strings.
  *@dest: destination string
  *@src: source string
  *@n: number of bytes allowed from source
  *Return: dest
  */

char *_strncat(char *dest, char *src, int n)
{
	char *dest_start = dest;
	int dest_len = 0;

	while (*dest != '\0')
	{
		dest_len++;
		dest++;
	}
	while (*src != '\0' && n--)
	{
		*(dest++) = *(src++);

	}
	if (dest_len + n >= 0)
	{
		*dest = '\0';

	}
	return (dest_start);

}

100-atoi.c/     0           0     0     644     463       `
#include "main.h"

/**
  *_atoi- function that convert a string to an integer.
  *@s:pointer to be converted to integer
  *Return: integer
  */

int _atoi(char *s)
{
	int j = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[j])
	{
		if (s[j] == '-')
		{
			min *= -1;
		}

		while (s[j] >= '0' && s[j] <= '9')
		{
			isi = 1;
			ni = (ni * 10) + (s[j] - '0');
			j++;
		}

		if (isi == 1)
		{
			break;
		}

		j++;
	}

	ni *= min;
	return (ni);
}


2-strchr.c/     0           0     0     644     598       `
#include "main.h"

/**
  *_strchr- function that locates a character in a string
  *@s: string that will be used in the search
  *@c: character that is been looked for
  *Return: pointer to the first occurrence of the character c in the
  *string s, or NULL if the character is not found
  *NULL- to be returned if character is not found
  */
char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;

	}
	/*checking for the terminating null character so that it isn't */
	  /*missed in the search*/

	if (*s == c)
	{
		return (s);

	}
	return (NULL);

}
2-strlen.c/     0           0     0     644     233       `
#include "main.h"

/**
  *_strlen- function that returns the length of a string.
  *
  *@s: string
  *Return: length
  */

int _strlen(char *s)
{
	int length = 0;

	while (*s != '\0')
	{
		length++;
		s++;
	}

	return (length);


}


2-strncpy.c/    0           0     0     644     376       `
#include "main.h"

/**
  *_strncpy-  function that copies a string
  *@dest: pointer to destination
  *@src: pointer to source
  *@n: number of bytes to be copied
  *Return: copied string
  */


char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)

		dest[i] = src[i];
	for ( ; i < n; i++)

		dest[i] = '\0';


	return (dest);

}
3-islower.c/    0           0     0     644     262       `
#include "main.h"

/**
  * _islower- function that checks for lowercase character
  *@c: the character to check
  *Return: 1 if c is lowercase, 0 otherwise
 */

int _islower(int c)
{

	if (c >= 'a' && c <= 'z')
	{
		return (1);

	}
	else
	{
		return (0);

	}

}
3-puts.c/       0           0     0     644     254       `
#include "main.h"

/**
  *_puts- function that prints a string, followed
  *by a new line, to stdout.
  *@str: string to be printed
  */

void _puts(char *str)
{
	int a = 0;

	while (str[a] != '\0')
	{
		_putchar(str[a]);
		a++;


	}
	_putchar('\n');

}
3-strcmp.c/     0           0     0     644     277       `
#include "main.h"

/**
  *_strcmp- function that compares two strings.
  *@s1: string to be compared
  *@s2: string to be compared
  *Return: 0
  */

int _strcmp(char *s1, char *s2)
{
	for ( ; *s1 == *s2; s1++, s2++)

		if (*s1 == '\0')
			return (0);

	return (*s1 - *s2);

}

3-strspn.c/     0           0     0     644     499       `
#include "main.h"

/**
  *_strspn- function that gets the length of a prefix substring.
  *
  *@s:string to be searched
  *@accept:characters that will be accepted
  *Return: the number of bytes in the initial segment of s which
  *consist only of bytes from accept
  */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0 ; accept[j]; j++)
		{
			if (s[i] == accept[j])
				break;

		}
		if (accept[j] == '\0')
			break;
	}

	return (i);


}

4-isalpha.c/    0           0     0     644     318       `
#include "main.h"

/**
  *_isalpha -  function that checks for alphabetic character
  * @c: character to be checked
  *Return: 1 if c is a letter, lowercase or uppercase, 0 otherwise
  */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);


	}
	else
	{
		return (0);

	}


}
4-strpbrk.c/    0           0     0     644     576       `
#include "main.h"

/**
  *_strpbrk- function that searches a string for any of a set of bytes.
  *@s: string to be searched
  *@accept: string that contains the accepted bytes
  *Return: pointer to the byte in s that matches one of the
  *bytes in accept, or NULL if no such byte is found
  */
char *_strpbrk(char *s, char *accept)
{
	int i;

	/*iterate through each charcter in s*/
	while (*s != '\0')
	{
		for (i = 0; accept[i] != '\0'; i++)
		{
			if (*s == accept[i])
			{
				return (s);
			}


		}
		/*move to the next character in s*/
		s++;

	}
	return (NULL);





}
5-strstr.c/     0           0     0     644     874       `
#include "main.h"

/**
  *_strstr- function that locates a substring.
  *
  *@needle: string to be searched for
  *@haystack: the string to be searched in
  *Return: a pointer to the beginning of the located
  *       substring, or NULL if the substring is not found.
  */

char *_strstr(char *haystack, char *needle)
{
	int i, j;

	if (*needle == '\0')
	{
		return (haystack);
	}

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			/*if full combination of needle is not found in*/
			/*haystack break out of loop and start all over again*/
			if (haystack[i + j] != needle[j])
			{
				break;
			}

		}
		/*If whole needle substring is found return pointer to*/
		/*start of substring within haystack*/
		if (needle[j] == '\0')
		{
			return (haystack + i);
		}

	}
	/*if needle not found in haystack return NULL*/
	return (NULL);


}

6-abs.c/        0           0     0     644     285       `
#include "main.h"

/**
  *_abs- function that computes the absolute value of an integer
  *@i: integer to compute the absolute value of
  *Return: the absolute value of the integer
  */

int _abs(int i)
{

	{
		if (i < 0)
		{
			return (-i);

		}
		else
		{
			return (i);

		}

	}

}

9-strcpy.c/     0           0     0     644     394       `
#include "main.h"

/**
  **_strcpy- function that copies the string pointed to by src, including
  *the terminating null byte (\0), to the buffer pointed to by dest.
  *@src: source
  *@dest: destinationy
  *Return:the pointer to dest
  */

char *_strcpy(char *dest, char *src)
{
	char *orig_dest = dest;

	while (*src != '\0')
	{
		*dest++ = *src++;
	}
	*dest = '\0';

	return (orig_dest);

}
_putchar.c/     0           0     0     644     266       `
#include "main.h"
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
		return (write(1, &c, 1));
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
